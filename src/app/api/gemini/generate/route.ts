import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { prompt, apiKey, post } = await request.json();

    if (!apiKey) {
      return NextResponse.json(
        { error: 'Gemini API key is required' },
        { status: 400 }
      );
    }

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      );
    }

    // Call Gemini API
    const geminiResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      })
    });

    if (!geminiResponse.ok) {
      const errorData = await geminiResponse.json();
      throw new Error(`Gemini API error: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await geminiResponse.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      throw new Error('No content generated by Gemini');
    }

    // Format the content for blog post
    const formattedContent = formatBlogContent(generatedText, post);

    return NextResponse.json({
      content: formattedContent,
      original: generatedText,
      metadata: {
        model: 'gemini-pro',
        tokens: data.usageMetadata?.totalTokenCount || 0,
        generatedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Gemini generation error:', error);
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : 'Failed to generate content',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

function formatBlogContent(content: string, post: any): string {
  // Basic formatting to ensure proper markdown structure
  let formatted = content.trim();

  // Ensure the content starts with a proper heading
  if (!formatted.startsWith('#')) {
    formatted = `# ${post.title}\n\n${formatted}`;
  }

  // Add metadata section
  const metadata = `---
title: "${post.title}"
slug: "${post.slug}"
excerpt: "${post.excerpt || 'Generated content'}"
category: "${post.category}"
tags: [${post.tags.map((tag: string) => `"${tag}"`).join(', ')}]
keywords: [${post.keywords.map((keyword: string) => `"${keyword}"`).join(', ')}]
cluster: "${post.cluster}"
priority: "${post.priority}"
week: ${post.week}
month: ${post.month}
status: "draft"
publishedAt: "${post.scheduledFor || new Date().toISOString()}"
---

`;

  return metadata + formatted;
}
